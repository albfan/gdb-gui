A few notes on gdb improvements that would help the GUI:

* The dprintf code here required some hacks.
  Some kind of I/O redirection capability would be helpful.
  Also this would require being able to subclass a dprintf breakpoint.
  Alternatively, a hook on a Breakpoint that is called when a
  linespec is resolved would work.  Right now you can't make a pending
  "gui dprintf".

* Some events are missing.  This means the GUI can't properly react to
  changes.  For example:
  * No "new breakpoint" event.  (And this in turn means that more
    breakpoint types must be exposed.)
    http://sourceware.org/bugzilla/show_bug.cgi?id=15620
  * No "new shared library" event.
    http://sourceware.org/bugzilla/show_bug.cgi?id=15621
  * No "new thread" event.
    http://sourceware.org/bugzilla/show_bug.cgi?id=15622
  * No "frame selection" event, e.g. when user types "up".
    https://sourceware.org/bugzilla/show_bug.cgi?id=13598

* The "set font" and "show font" commands need a bogus doc string to
  avoid either a doubled doc line or printing that the command isn't
  documented.  And, "set font" prints a line unconditionally, see bug
  14513.

* Trying to add a set/show prefix is hard.  I had to add two separate
  commands and then couldn't get "set gui" (without further args) to
  work the way that it does in gdb.  Maybe it should just invoke
  "help set gui"?

================================================================

Windows

assembly view (?)
breakpoint
signal handling?
data display
  special registers display?
stack
inferiors/threads
  could expand into stack?
list of files in the program
redirect gdb stdlog to a window
